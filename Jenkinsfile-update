library("tdr-jenkinslib")

pipeline {
  agent {
    ecs {
      inheritFrom "aws"
      taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRJenkinsNodeReadParamsRole${params.STAGE.capitalize()}"
    }
  }
  parameters {
    choice(name: "STAGE", choices: ["intg", "staging", "prod"], description: "TDR environment where Keycloak configuration will be updated")
  }
  stages {
    stage("Get TDR realm configuration") {
      steps {
        sshagent(['github-jenkins']) {
          sh("git clone --branch master git@github.com:nationalarchives/tdr-configurations.git")
          sh("cp tdr-configurations/keycloak/tdr-realm-export.json .")
        }
      }
      post {
        always {
          sh("rm -rf tdr-configurations")
        }
      }
    }
    stage("Get Keycloak administrative credentials") {
      steps {
        script {
          account_number = tdr.getAccountNumberFromStage(params.STAGE)
          keycloak_user_key = "/${params.STAGE}/keycloak/admin/user"
          keycloak_password_key = "/${params.STAGE}/keycloak/admin/password"
          keycloak_user = sh(script: "python3 /ssm_get_parameter.py ${account_number} ${params.STAGE} ${keycloak_user_key}", returnStdout: true).trim()
          keycloak_password = sh(script: "python3 /ssm_get_parameter.py ${account_number} ${params.STAGE} ${keycloak_password_key}", returnStdout: true).trim()
        }
      }
    }
    stage("Import TDR realm configuration") {
      steps {
        script {
          //Hide the output of the python command to stop keycloak credentials appearing in console output
          sh """
            set +x
            python3 /partial_import_env_realm.py ${params.STAGE} ${keycloak_user} ${keycloak_password}
          """
        }
      }
    }
  }
}
